/*! For license information please see bundle.js.LICENSE.txt */
!function (t, e) { "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.MyLibrary = e() : t.MyLibrary = e(); }(self, (() => (() => { "use strict"; var t = { d: (e, r) => { for (var a in r) t.o(r, a) && !t.o(e, a) && Object.defineProperty(e, a, { enumerable: !0, get: r[a] }); }, o: (t, e) => Object.prototype.hasOwnProperty.call(t, e), r: t => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }); } }, e = {}; function r(t) { return t < 0 ? -1 : 0 === t ? 0 : 1; } function a(t, e, r) { return (1 - r) * t + r * e; } function n(t, e, r) { return r < t ? t : r > e ? e : r; } function o(t) { return (t %= 360) < 0 && (t += 360), t; } function i(t) { return (t %= 360) < 0 && (t += 360), t; } function s(t, e) { return [t[0] * e[0][0] + t[1] * e[0][1] + t[2] * e[0][2], t[0] * e[1][0] + t[1] * e[1][1] + t[2] * e[1][2], t[0] * e[2][0] + t[1] * e[2][1] + t[2] * e[2][2]]; } t.r(e), t.d(e, { updateCSSColorSchemeWith: () => K }); const c = [[.41233895, .35762064, .18051042], [.2126, .7152, .0722], [.01932141, .11916382, .95034478]], h = [[3.2413774792388685, -1.5376652402851851, -.49885366846268053], [-.9691452513005321, 1.8758853451067872, .04156585616912061], [.05562093689691305, -.20395524564742123, 1.0571799111220335]], u = [95.047, 100, 108.883]; function l(t, e, r) { return (255 << 24 | (255 & t) << 16 | (255 & e) << 8 | 255 & r) >>> 0; } function g(t) { return l(b(t[0]), b(t[1]), b(t[2])); } function m(t) { return t >> 16 & 255; } function d(t) { return t >> 8 & 255; } function f(t) { return 255 & t; } function y(t) { const e = function (t) { return s([C(m(t)), C(d(t)), C(f(t))], c); }(t)[1]; return 116 * M(e / 100) - 16; } function p(t) { return 100 * function (t) { const e = t * t * t; return e > 216 / 24389 ? e : (116 * t - 16) / (24389 / 27); }((t + 16) / 116); } function P(t) { return 116 * M(t / 100) - 16; } function C(t) { const e = t / 255; return e <= .040449936 ? e / 12.92 * 100 : 100 * Math.pow((e + .055) / 1.055, 2.4); } function b(t) { const e = t / 100; let r = 0; return r = e <= .0031308 ? 12.92 * e : 1.055 * Math.pow(e, 1 / 2.4) - .055, (a = Math.round(255 * r)) < 0 ? 0 : a > 255 ? 255 : a; var a; } function M(t) { return t > 216 / 24389 ? Math.pow(t, 1 / 3) : (24389 / 27 * t + 16) / 116; } class w { static make(t = function () { return u; }(), e = 200 / Math.PI * p(50) / 100, r = 50, n = 2, o = !1) { const i = t, s = .401288 * i[0] + .650173 * i[1] + -.051461 * i[2], c = -.250268 * i[0] + 1.204414 * i[1] + .045854 * i[2], h = -.002079 * i[0] + .048952 * i[1] + .953127 * i[2], l = .8 + n / 10, g = l >= .9 ? a(.59, .69, 10 * (l - .9)) : a(.525, .59, 10 * (l - .8)); let m = o ? 1 : l * (1 - 1 / 3.6 * Math.exp((-e - 42) / 92)); m = m > 1 ? 1 : m < 0 ? 0 : m; const d = l, f = [m * (100 / s) + 1 - m, m * (100 / c) + 1 - m, m * (100 / h) + 1 - m], y = 1 / (5 * e + 1), P = y * y * y * y, C = 1 - P, b = P * e + .1 * C * C * Math.cbrt(5 * e), M = p(r) / t[1], k = 1.48 + Math.sqrt(M), D = .725 / Math.pow(M, .2), T = D, A = [Math.pow(b * f[0] * s / 100, .42), Math.pow(b * f[1] * c / 100, .42), Math.pow(b * f[2] * h / 100, .42)], v = [400 * A[0] / (A[0] + 27.13), 400 * A[1] / (A[1] + 27.13), 400 * A[2] / (A[2] + 27.13)]; return new w(M, (2 * v[0] + v[1] + .05 * v[2]) * D, D, T, g, d, f, b, Math.pow(b, .25), k); } constructor(t, e, r, a, n, o, i, s, c, h) { this.n = t, this.aw = e, this.nbb = r, this.ncb = a, this.c = n, this.nc = o, this.rgbD = i, this.fl = s, this.fLRoot = c, this.z = h; } } w.DEFAULT = w.make(); class k { constructor(t, e, r, a, n, o, i, s, c) { this.hue = t, this.chroma = e, this.j = r, this.q = a, this.m = n, this.s = o, this.jstar = i, this.astar = s, this.bstar = c; } distance(t) { const e = this.jstar - t.jstar, r = this.astar - t.astar, a = this.bstar - t.bstar, n = Math.sqrt(e * e + r * r + a * a); return 1.41 * Math.pow(n, .63); } static fromInt(t) { return k.fromIntInViewingConditions(t, w.DEFAULT); } static fromIntInViewingConditions(t, e) { const a = (65280 & t) >> 8, n = 255 & t, o = C((16711680 & t) >> 16), i = C(a), s = C(n), c = .41233895 * o + .35762064 * i + .18051042 * s, h = .2126 * o + .7152 * i + .0722 * s, u = .01932141 * o + .11916382 * i + .95034478 * s, l = .401288 * c + .650173 * h - .051461 * u, g = -.250268 * c + 1.204414 * h + .045854 * u, m = -.002079 * c + .048952 * h + .953127 * u, d = e.rgbD[0] * l, f = e.rgbD[1] * g, y = e.rgbD[2] * m, p = Math.pow(e.fl * Math.abs(d) / 100, .42), P = Math.pow(e.fl * Math.abs(f) / 100, .42), b = Math.pow(e.fl * Math.abs(y) / 100, .42), M = 400 * r(d) * p / (p + 27.13), w = 400 * r(f) * P / (P + 27.13), D = 400 * r(y) * b / (b + 27.13), T = (11 * M + -12 * w + D) / 11, A = (M + w - 2 * D) / 9, v = (20 * M + 20 * w + 21 * D) / 20, _ = (40 * M + 20 * w + D) / 20, I = 180 * Math.atan2(A, T) / Math.PI, B = I < 0 ? I + 360 : I >= 360 ? I - 360 : I, x = B * Math.PI / 180, F = _ * e.nbb, O = 100 * Math.pow(F / e.aw, e.c * e.z), R = 4 / e.c * Math.sqrt(O / 100) * (e.aw + 4) * e.fLRoot, S = B < 20.14 ? B + 360 : B, H = 5e4 / 13 * (.25 * (Math.cos(S * Math.PI / 180 + 2) + 3.8)) * e.nc * e.ncb * Math.sqrt(T * T + A * A) / (v + .305), L = Math.pow(H, .9) * Math.pow(1.64 - Math.pow(.29, e.n), .73), E = L * Math.sqrt(O / 100), V = E * e.fLRoot, N = 50 * Math.sqrt(L * e.c / (e.aw + 4)), U = (1 + 100 * .007) * O / (1 + .007 * O), q = 1 / .0228 * Math.log(1 + .0228 * V), G = q * Math.cos(x), z = q * Math.sin(x); return new k(B, E, O, R, V, N, U, G, z); } static fromJch(t, e, r) { return k.fromJchInViewingConditions(t, e, r, w.DEFAULT); } static fromJchInViewingConditions(t, e, r, a) { const n = 4 / a.c * Math.sqrt(t / 100) * (a.aw + 4) * a.fLRoot, o = e * a.fLRoot, i = e / Math.sqrt(t / 100), s = 50 * Math.sqrt(i * a.c / (a.aw + 4)), c = r * Math.PI / 180, h = (1 + 100 * .007) * t / (1 + .007 * t), u = 1 / .0228 * Math.log(1 + .0228 * o), l = u * Math.cos(c), g = u * Math.sin(c); return new k(r, e, t, n, o, s, h, l, g); } static fromUcs(t, e, r) { return k.fromUcsInViewingConditions(t, e, r, w.DEFAULT); } static fromUcsInViewingConditions(t, e, r, a) { const n = e, o = r, i = Math.sqrt(n * n + o * o), s = (Math.exp(.0228 * i) - 1) / .0228 / a.fLRoot; let c = Math.atan2(o, n) * (180 / Math.PI); c < 0 && (c += 360); const h = t / (1 - .007 * (t - 100)); return k.fromJchInViewingConditions(h, s, c, a); } toInt() { return this.viewed(w.DEFAULT); } viewed(t) { const e = 0 === this.chroma || 0 === this.j ? 0 : this.chroma / Math.sqrt(this.j / 100), a = Math.pow(e / Math.pow(1.64 - Math.pow(.29, t.n), .73), 1 / .9), n = this.hue * Math.PI / 180, o = .25 * (Math.cos(n + 2) + 3.8), i = t.aw * Math.pow(this.j / 100, 1 / t.c / t.z), s = o * (5e4 / 13) * t.nc * t.ncb, c = i / t.nbb, u = Math.sin(n), g = Math.cos(n), m = 23 * (c + .305) * a / (23 * s + 11 * a * g + 108 * a * u), d = m * g, f = m * u, y = (460 * c + 451 * d + 288 * f) / 1403, p = (460 * c - 891 * d - 261 * f) / 1403, P = (460 * c - 220 * d - 6300 * f) / 1403, C = Math.max(0, 27.13 * Math.abs(y) / (400 - Math.abs(y))), M = r(y) * (100 / t.fl) * Math.pow(C, 1 / .42), w = Math.max(0, 27.13 * Math.abs(p) / (400 - Math.abs(p))), k = r(p) * (100 / t.fl) * Math.pow(w, 1 / .42), D = Math.max(0, 27.13 * Math.abs(P) / (400 - Math.abs(P))), T = r(P) * (100 / t.fl) * Math.pow(D, 1 / .42), A = M / t.rgbD[0], v = k / t.rgbD[1], _ = T / t.rgbD[2]; return function (t, e, r) { const a = h, n = a[0][0] * t + a[0][1] * e + a[0][2] * r, o = a[1][0] * t + a[1][1] * e + a[1][2] * r, i = a[2][0] * t + a[2][1] * e + a[2][2] * r; return l(b(n), b(o), b(i)); }(1.86206786 * A - 1.01125463 * v + .14918677 * _, .38752654 * A + .62144744 * v - .00897398 * _, -.0158415 * A - .03412294 * v + 1.04996444 * _); } static fromXyzInViewingConditions(t, e, a, n) { const o = .401288 * t + .650173 * e - .051461 * a, i = -.250268 * t + 1.204414 * e + .045854 * a, s = -.002079 * t + .048952 * e + .953127 * a, c = n.rgbD[0] * o, h = n.rgbD[1] * i, u = n.rgbD[2] * s, l = Math.pow(n.fl * Math.abs(c) / 100, .42), g = Math.pow(n.fl * Math.abs(h) / 100, .42), m = Math.pow(n.fl * Math.abs(u) / 100, .42), d = 400 * r(c) * l / (l + 27.13), f = 400 * r(h) * g / (g + 27.13), y = 400 * r(u) * m / (m + 27.13), p = (11 * d + -12 * f + y) / 11, P = (d + f - 2 * y) / 9, C = (20 * d + 20 * f + 21 * y) / 20, b = (40 * d + 20 * f + y) / 20, M = 180 * Math.atan2(P, p) / Math.PI, w = M < 0 ? M + 360 : M >= 360 ? M - 360 : M, D = w * Math.PI / 180, T = b * n.nbb, A = 100 * Math.pow(T / n.aw, n.c * n.z), v = 4 / n.c * Math.sqrt(A / 100) * (n.aw + 4) * n.fLRoot, _ = w < 20.14 ? w + 360 : w, I = 5e4 / 13 * (1 / 4 * (Math.cos(_ * Math.PI / 180 + 2) + 3.8)) * n.nc * n.ncb * Math.sqrt(p * p + P * P) / (C + .305), B = Math.pow(I, .9) * Math.pow(1.64 - Math.pow(.29, n.n), .73), x = B * Math.sqrt(A / 100), F = x * n.fLRoot, O = 50 * Math.sqrt(B * n.c / (n.aw + 4)), R = (1 + 100 * .007) * A / (1 + .007 * A), S = Math.log(1 + .0228 * F) / .0228, H = S * Math.cos(D), L = S * Math.sin(D); return new k(w, x, A, v, F, O, R, H, L); } xyzInViewingConditions(t) { const e = 0 === this.chroma || 0 === this.j ? 0 : this.chroma / Math.sqrt(this.j / 100), a = Math.pow(e / Math.pow(1.64 - Math.pow(.29, t.n), .73), 1 / .9), n = this.hue * Math.PI / 180, o = .25 * (Math.cos(n + 2) + 3.8), i = t.aw * Math.pow(this.j / 100, 1 / t.c / t.z), s = o * (5e4 / 13) * t.nc * t.ncb, c = i / t.nbb, h = Math.sin(n), u = Math.cos(n), l = 23 * (c + .305) * a / (23 * s + 11 * a * u + 108 * a * h), g = l * u, m = l * h, d = (460 * c + 451 * g + 288 * m) / 1403, f = (460 * c - 891 * g - 261 * m) / 1403, y = (460 * c - 220 * g - 6300 * m) / 1403, p = Math.max(0, 27.13 * Math.abs(d) / (400 - Math.abs(d))), P = r(d) * (100 / t.fl) * Math.pow(p, 1 / .42), C = Math.max(0, 27.13 * Math.abs(f) / (400 - Math.abs(f))), b = r(f) * (100 / t.fl) * Math.pow(C, 1 / .42), M = Math.max(0, 27.13 * Math.abs(y) / (400 - Math.abs(y))), w = r(y) * (100 / t.fl) * Math.pow(M, 1 / .42), k = P / t.rgbD[0], D = b / t.rgbD[1], T = w / t.rgbD[2]; return [1.86206786 * k - 1.01125463 * D + .14918677 * T, .38752654 * k + .62144744 * D - .00897398 * T, -.0158415 * k - .03412294 * D + 1.04996444 * T]; } } class D { static sanitizeRadians(t) { return (t + 8 * Math.PI) % (2 * Math.PI); } static trueDelinearized(t) { const e = t / 100; let r = 0; return r = e <= .0031308 ? 12.92 * e : 1.055 * Math.pow(e, 1 / 2.4) - .055, 255 * r; } static chromaticAdaptation(t) { const e = Math.pow(Math.abs(t), .42); return 400 * r(t) * e / (e + 27.13); } static hueOf(t) { const e = s(t, D.SCALED_DISCOUNT_FROM_LINRGB), r = D.chromaticAdaptation(e[0]), a = D.chromaticAdaptation(e[1]), n = D.chromaticAdaptation(e[2]), o = (11 * r + -12 * a + n) / 11, i = (r + a - 2 * n) / 9; return Math.atan2(i, o); } static areInCyclicOrder(t, e, r) { return D.sanitizeRadians(e - t) < D.sanitizeRadians(r - t); } static intercept(t, e, r) { return (e - t) / (r - t); } static lerpPoint(t, e, r) { return [t[0] + (r[0] - t[0]) * e, t[1] + (r[1] - t[1]) * e, t[2] + (r[2] - t[2]) * e]; } static setCoordinate(t, e, r, a) { const n = D.intercept(t[a], e, r[a]); return D.lerpPoint(t, n, r); } static isBounded(t) { return 0 <= t && t <= 100; } static nthVertex(t, e) { const r = D.Y_FROM_LINRGB[0], a = D.Y_FROM_LINRGB[1], n = D.Y_FROM_LINRGB[2], o = e % 4 <= 1 ? 0 : 100, i = e % 2 == 0 ? 0 : 100; if (e < 4) { const e = o, s = i, c = (t - e * a - s * n) / r; return D.isBounded(c) ? [c, e, s] : [-1, -1, -1]; } if (e < 8) { const e = o, s = i, c = (t - s * r - e * n) / a; return D.isBounded(c) ? [s, c, e] : [-1, -1, -1]; } { const e = o, s = i, c = (t - e * r - s * a) / n; return D.isBounded(c) ? [e, s, c] : [-1, -1, -1]; } } static bisectToSegment(t, e) { let r = [-1, -1, -1], a = r, n = 0, o = 0, i = !1, s = !0; for (let c = 0; c < 12; c++) { const h = D.nthVertex(t, c); if (h[0] < 0) continue; const u = D.hueOf(h); i ? (s || D.areInCyclicOrder(n, u, o)) && (s = !1, D.areInCyclicOrder(n, e, u) ? (a = h, o = u) : (r = h, n = u)) : (r = h, a = h, n = u, o = u, i = !0); } return [r, a]; } static midpoint(t, e) { return [(t[0] + e[0]) / 2, (t[1] + e[1]) / 2, (t[2] + e[2]) / 2]; } static criticalPlaneBelow(t) { return Math.floor(t - .5); } static criticalPlaneAbove(t) { return Math.ceil(t - .5); } static bisectToLimit(t, e) { const r = D.bisectToSegment(t, e); let a = r[0], n = D.hueOf(a), o = r[1]; for (let t = 0; t < 3; t++)if (a[t] !== o[t]) { let r = -1, i = 255; a[t] < o[t] ? (r = D.criticalPlaneBelow(D.trueDelinearized(a[t])), i = D.criticalPlaneAbove(D.trueDelinearized(o[t]))) : (r = D.criticalPlaneAbove(D.trueDelinearized(a[t])), i = D.criticalPlaneBelow(D.trueDelinearized(o[t]))); for (let s = 0; s < 8 && !(Math.abs(i - r) <= 1); s++) { const s = Math.floor((r + i) / 2), c = D.CRITICAL_PLANES[s], h = D.setCoordinate(a, c, o, t), u = D.hueOf(h); D.areInCyclicOrder(n, e, u) ? (o = h, i = s) : (a = h, n = u, r = s); } } return D.midpoint(a, o); } static inverseChromaticAdaptation(t) { const e = Math.abs(t), a = Math.max(0, 27.13 * e / (400 - e)); return r(t) * Math.pow(a, 1 / .42); } static findResultByJ(t, e, r) { let a = 11 * Math.sqrt(r); const n = w.DEFAULT, o = 1 / Math.pow(1.64 - Math.pow(.29, n.n), .73), i = .25 * (Math.cos(t + 2) + 3.8) * (5e4 / 13) * n.nc * n.ncb, c = Math.sin(t), h = Math.cos(t); for (let t = 0; t < 5; t++) { const u = a / 100, l = 0 === e || 0 === a ? 0 : e / Math.sqrt(u), m = Math.pow(l * o, 1 / .9), d = n.aw * Math.pow(u, 1 / n.c / n.z) / n.nbb, f = 23 * (d + .305) * m / (23 * i + 11 * m * h + 108 * m * c), y = f * h, p = f * c, P = (460 * d + 451 * y + 288 * p) / 1403, C = (460 * d - 891 * y - 261 * p) / 1403, b = (460 * d - 220 * y - 6300 * p) / 1403, M = s([D.inverseChromaticAdaptation(P), D.inverseChromaticAdaptation(C), D.inverseChromaticAdaptation(b)], D.LINRGB_FROM_SCALED_DISCOUNT); if (M[0] < 0 || M[1] < 0 || M[2] < 0) return 0; const w = D.Y_FROM_LINRGB[0], k = D.Y_FROM_LINRGB[1], T = D.Y_FROM_LINRGB[2], A = w * M[0] + k * M[1] + T * M[2]; if (A <= 0) return 0; if (4 === t || Math.abs(A - r) < .002) return M[0] > 100.01 || M[1] > 100.01 || M[2] > 100.01 ? 0 : g(M); a -= (A - r) * a / (2 * A); } return 0; } static solveToInt(t, e, r) { if (e < 1e-4 || r < 1e-4 || r > 99.9999) return function (t) { const e = b(p(t)); return l(e, e, e); }(r); const a = (t = i(t)) / 180 * Math.PI, n = p(r), o = D.findResultByJ(a, e, n); return 0 !== o ? o : g(D.bisectToLimit(n, a)); } static solveToCam(t, e, r) { return k.fromInt(D.solveToInt(t, e, r)); } } D.SCALED_DISCOUNT_FROM_LINRGB = [[.001200833568784504, .002389694492170889, .0002795742885861124], [.0005891086651375999, .0029785502573438758, .0003270666104008398], [.00010146692491640572, .0005364214359186694, .0032979401770712076]], D.LINRGB_FROM_SCALED_DISCOUNT = [[1373.2198709594231, -1100.4251190754821, -7.278681089101213], [-271.815969077903, 559.6580465940733, -32.46047482791194], [1.9622899599665666, -57.173814538844006, 308.7233197812385]], D.Y_FROM_LINRGB = [.2126, .7152, .0722], D.CRITICAL_PLANES = [.015176349177441876, .045529047532325624, .07588174588720938, .10623444424209313, .13658714259697685, .16693984095186062, .19729253930674434, .2276452376616281, .2579979360165119, .28835063437139563, .3188300904430532, .350925934958123, .3848314933096426, .42057480301049466, .458183274052838, .4976837250274023, .5391024159806381, .5824650784040898, .6277969426914107, .6751227633498623, .7244668422128921, .775853049866786, .829304845476233, .8848452951698498, .942497089126609, 1.0022825574869039, 1.0642236851973577, 1.1283421258858297, 1.1946592148522128, 1.2631959812511864, 1.3339731595349034, 1.407011200216447, 1.4823302800086415, 1.5599503113873272, 1.6398909516233677, 1.7221716113234105, 1.8068114625156377, 1.8938294463134073, 1.9832442801866852, 2.075074464868551, 2.1693382909216234, 2.2660538449872063, 2.36523901573795, 2.4669114995532007, 2.5710888059345764, 2.6777882626779785, 2.7870270208169257, 2.898822059350997, 3.0131901897720907, 3.1301480604002863, 3.2497121605402226, 3.3718988244681087, 3.4967242352587946, 3.624204428461639, 3.754355295633311, 3.887192587735158, 4.022731918402185, 4.160988767090289, 4.301978482107941, 4.445716283538092, 4.592217266055746, 4.741496401646282, 4.893568542229298, 5.048448422192488, 5.20615066083972, 5.3666897647573375, 5.5300801301023865, 5.696336044816294, 5.865471690767354, 6.037501145825082, 6.212438385869475, 6.390297286737924, 6.571091626112461, 6.7548350853498045, 6.941541251256611, 7.131223617812143, 7.323895587840543, 7.5195704746346665, 7.7182615035334345, 7.919981813454504, 8.124744458384042, 8.332562408825165, 8.543448553206703, 8.757415699253682, 8.974476575321063, 9.194643831691977, 9.417930041841839, 9.644347703669503, 9.873909240696694, 10.106627003236781, 10.342513269534024, 10.58158024687427, 10.8238400726681, 11.069304815507364, 11.317986476196008, 11.569896988756009, 11.825048221409341, 12.083451977536606, 12.345119996613247, 12.610063955123938, 12.878295467455942, 13.149826086772048, 13.42466730586372, 13.702830557985108, 13.984327217668513, 14.269168601521828, 14.55736596900856, 14.848930523210871, 15.143873411576273, 15.44220572664832, 15.743938506781891, 16.04908273684337, 16.35764934889634, 16.66964922287304, 16.985093187232053, 17.30399201960269, 17.62635644741625, 17.95219714852476, 18.281524751807332, 18.614349837764564, 18.95068293910138, 19.290534541298456, 19.633915083172692, 19.98083495742689, 20.331304511189067, 20.685334046541502, 21.042933821039977, 21.404114048223256, 21.76888489811322, 22.137256497705877, 22.50923893145328, 22.884842241736916, 23.264076429332462, 23.6469514538663, 24.033477234264016, 24.42366364919083, 24.817520537484558, 25.21505769858089, 25.61628489293138, 26.021211842414342, 26.429848230738664, 26.842203703840827, 27.258287870275353, 27.678110301598522, 28.10168053274597, 28.529008062403893, 28.96010235337422, 29.39497283293396, 29.83362889318845, 30.276079891419332, 30.722335150426627, 31.172403958865512, 31.62629557157785, 32.08401920991837, 32.54558406207592, 33.010999283389665, 33.4802739966603, 33.953417292456834, 34.430438229418264, 34.911345834551085, 35.39614910352207, 35.88485700094671, 36.37747846067349, 36.87402238606382, 37.37449765026789, 37.87891309649659, 38.38727753828926, 38.89959975977785, 39.41588851594697, 39.93615253289054, 40.460400508064545, 40.98864111053629, 41.520882981230194, 42.05713473317016, 42.597404951718396, 43.141702194811224, 43.6900349931913, 44.24241185063697, 44.798841244188324, 45.35933162437017, 45.92389141541209, 46.49252901546552, 47.065252796817916, 47.64207110610409, 48.22299226451468, 48.808024568002054, 49.3971762874833, 49.9904556690408, 50.587870934119984, 51.189430279724725, 51.79514187861014, 52.40501387947288, 53.0190544071392, 53.637271562750364, 54.259673423945976, 54.88626804504493, 55.517063457223934, 56.15206766869424, 56.79128866487574, 57.43473440856916, 58.08241284012621, 58.734331877617365, 59.39049941699807, 60.05092333227251, 60.715611475655585, 61.38457167773311, 62.057811747619894, 62.7353394731159, 63.417162620860914, 64.10328893648692, 64.79372614476921, 65.48848194977529, 66.18756403501224, 66.89098006357258, 67.59873767827808, 68.31084450182222, 69.02730813691093, 69.74813616640164, 70.47333615344107, 71.20291564160104, 71.93688215501312, 72.67524319850172, 73.41800625771542, 74.16517879925733, 74.9167682708136, 75.67278210128072, 76.43322770089146, 77.1981124613393, 77.96744375590167, 78.74122893956174, 79.51947534912904, 80.30219030335869, 81.08938110306934, 81.88105503125999, 82.67721935322541, 83.4778813166706, 84.28304815182372, 85.09272707154808, 85.90692527145302, 86.72564993000343, 87.54890820862819, 88.3767072518277, 89.2090541872801, 90.04595612594655, 90.88742016217518, 91.73345337380438, 92.58406282226491, 93.43925555268066, 94.29903859396902, 95.16341895893969, 96.03240364439274, 96.9059996312159, 97.78421388448044, 98.6670533535366, 99.55452497210776]; class T { static from(t, e, r) { return new T(D.solveToInt(t, e, r)); } static fromInt(t) { return new T(t); } toInt() { return this.argb; } get hue() { return this.internalHue; } set hue(t) { this.setInternalState(D.solveToInt(t, this.internalChroma, this.internalTone)); } get chroma() { return this.internalChroma; } set chroma(t) { this.setInternalState(D.solveToInt(this.internalHue, t, this.internalTone)); } get tone() { return this.internalTone; } set tone(t) { this.setInternalState(D.solveToInt(this.internalHue, this.internalChroma, t)); } constructor(t) { this.argb = t; const e = k.fromInt(t); this.internalHue = e.hue, this.internalChroma = e.chroma, this.internalTone = y(t), this.argb = t; } setInternalState(t) { const e = k.fromInt(t); this.internalHue = e.hue, this.internalChroma = e.chroma, this.internalTone = y(t), this.argb = t; } inViewingConditions(t) { const e = k.fromInt(this.toInt()).xyzInViewingConditions(t), r = k.fromXyzInViewingConditions(e[0], e[1], e[2], w.make()); return T.from(r.hue, r.chroma, P(e[1])); } } class A { static isDisliked(t) { const e = Math.round(t.hue) >= 90 && Math.round(t.hue) <= 111, r = Math.round(t.chroma) > 16, a = Math.round(t.tone) < 65; return e && r && a; } static fixIfDisliked(t) { return A.isDisliked(t) ? T.from(t.hue, t.chroma, 70) : t; } } class v { static fromInt(t) { const e = T.fromInt(t); return v.fromHct(e); } static fromHct(t) { return new v(t.hue, t.chroma, t); } static fromHueAndChroma(t, e) { const r = new _(t, e).create(); return new v(t, e, r); } constructor(t, e, r) { this.hue = t, this.chroma = e, this.keyColor = r, this.cache = new Map; } tone(t) { let e = this.cache.get(t); return void 0 === e && (e = T.from(this.hue, this.chroma, t).toInt(), this.cache.set(t, e)), e; } getHct(t) { return T.fromInt(this.tone(t)); } } class _ { constructor(t, e) { this.hue = t, this.requestedChroma = e, this.chromaCache = new Map, this.maxChromaValue = 200; } create() { let t = 0, e = 100; for (; t < e;) { const r = Math.floor((t + e) / 2), a = this.maxChroma(r) < this.maxChroma(r + 1); if (this.maxChroma(r) >= this.requestedChroma - .01) if (Math.abs(t - 50) < Math.abs(e - 50)) e = r; else { if (t === r) return T.from(this.hue, this.requestedChroma, t); t = r; } else a ? t = r + 1 : e = r; } return T.from(this.hue, this.requestedChroma, t); } maxChroma(t) { if (this.chromaCache.has(t)) return this.chromaCache.get(t); const e = T.from(this.hue, this.maxChromaValue, t).chroma; return this.chromaCache.set(t, e), e; } } class I { constructor(t, e, r, a) { this.low = t, this.normal = e, this.medium = r, this.high = a; } get(t) { return t <= -1 ? this.low : t < 0 ? a(this.low, this.normal, (t - -1) / 1) : t < .5 ? a(this.normal, this.medium, (t - 0) / .5) : t < 1 ? a(this.medium, this.high, (t - .5) / .5) : this.high; } } class B { static ratioOfTones(t, e) { return t = n(0, 100, t), e = n(0, 100, e), B.ratioOfYs(p(t), p(e)); } static ratioOfYs(t, e) { const r = t > e ? t : e; return (r + 5) / ((r === e ? t : e) + 5); } static lighter(t, e) { if (t < 0 || t > 100) return -1; const r = p(t), a = e * (r + 5) - 5, n = B.ratioOfYs(a, r), o = Math.abs(n - e); if (n < e && o > .04) return -1; const i = P(a) + .4; return i < 0 || i > 100 ? -1 : i; } static darker(t, e) { if (t < 0 || t > 100) return -1; const r = p(t), a = (r + 5) / e - 5, n = B.ratioOfYs(r, a), o = Math.abs(n - e); if (n < e && o > .04) return -1; const i = P(a) - .4; return i < 0 || i > 100 ? -1 : i; } static lighterUnsafe(t, e) { const r = B.lighter(t, e); return r < 0 ? 100 : r; } static darkerUnsafe(t, e) { const r = B.darker(t, e); return r < 0 ? 0 : r; } } class x { static fromPalette(t) { return new x(t.name ?? "", t.palette, t.tone, t.isBackground ?? !1, t.background, t.secondBackground, t.contrastCurve, t.toneDeltaPair); } constructor(t, e, r, a, n, o, i, s) { if (this.name = t, this.palette = e, this.tone = r, this.isBackground = a, this.background = n, this.secondBackground = o, this.contrastCurve = i, this.toneDeltaPair = s, this.hctCache = new Map, !n && o) throw new Error(`Color ${t} has secondBackgrounddefined, but background is not defined.`); if (!n && i) throw new Error(`Color ${t} has contrastCurvedefined, but background is not defined.`); if (n && !i) throw new Error(`Color ${t} has backgrounddefined, but contrastCurve is not defined.`); } getArgb(t) { return this.getHct(t).toInt(); } getHct(t) { const e = this.hctCache.get(t); if (null != e) return e; const r = this.getTone(t), a = this.palette(t).getHct(r); return this.hctCache.size > 4 && this.hctCache.clear(), this.hctCache.set(t, a), a; } getTone(t) { const e = t.contrastLevel < 0; if (this.toneDeltaPair) { const r = this.toneDeltaPair(t), a = r.roleA, o = r.roleB, i = r.delta, s = r.polarity, c = r.stayTogether, h = this.background(t).getTone(t), u = "nearer" === s || "lighter" === s && !t.isDark || "darker" === s && t.isDark, l = u ? a : o, g = u ? o : a, m = this.name === l.name, d = t.isDark ? 1 : -1, f = l.contrastCurve.get(t.contrastLevel), y = g.contrastCurve.get(t.contrastLevel), p = l.tone(t); let P = B.ratioOfTones(h, p) >= f ? p : x.foregroundTone(h, f); const C = g.tone(t); let b = B.ratioOfTones(h, C) >= y ? C : x.foregroundTone(h, y); return e && (P = x.foregroundTone(h, f), b = x.foregroundTone(h, y)), (b - P) * d >= i || (b = n(0, 100, P + i * d), (b - P) * d >= i || (P = n(0, 100, b - i * d))), 50 <= P && P < 60 ? d > 0 ? (P = 60, b = Math.max(b, P + i * d)) : (P = 49, b = Math.min(b, P + i * d)) : 50 <= b && b < 60 && (c ? d > 0 ? (P = 60, b = Math.max(b, P + i * d)) : (P = 49, b = Math.min(b, P + i * d)) : b = d > 0 ? 60 : 49), m ? P : b; } { let r = this.tone(t); if (null == this.background) return r; const a = this.background(t).getTone(t), n = this.contrastCurve.get(t.contrastLevel); if (B.ratioOfTones(a, r) >= n || (r = x.foregroundTone(a, n)), e && (r = x.foregroundTone(a, n)), this.isBackground && 50 <= r && r < 60 && (r = B.ratioOfTones(49, a) >= n ? 49 : 60), this.secondBackground) { const [e, a] = [this.background, this.secondBackground], [o, i] = [e(t).getTone(t), a(t).getTone(t)], [s, c] = [Math.max(o, i), Math.min(o, i)]; if (B.ratioOfTones(s, r) >= n && B.ratioOfTones(c, r) >= n) return r; const h = B.lighter(s, n), u = B.darker(c, n), l = []; return -1 !== h && l.push(h), -1 !== u && l.push(u), x.tonePrefersLightForeground(o) || x.tonePrefersLightForeground(i) ? h < 0 ? 100 : h : 1 === l.length ? l[0] : u < 0 ? 0 : u; } return r; } } static foregroundTone(t, e) { const r = B.lighterUnsafe(t, e), a = B.darkerUnsafe(t, e), n = B.ratioOfTones(r, t), o = B.ratioOfTones(a, t); if (x.tonePrefersLightForeground(t)) { const t = Math.abs(n - o) < .1 && n < e && o < e; return n >= e || n >= o || t ? r : a; } return o >= e || o >= n ? a : r; } static tonePrefersLightForeground(t) { return Math.round(t) < 60; } static toneAllowsLightForeground(t) { return Math.round(t) <= 49; } static enableLightForeground(t) { return x.tonePrefersLightForeground(t) && !x.toneAllowsLightForeground(t) ? 49 : t; } } class F { constructor(t, e, r, a, n) { this.roleA = t, this.roleB = e, this.delta = r, this.polarity = a, this.stayTogether = n; } } var O; function R(t) { return t.variant === O.FIDELITY || t.variant === O.CONTENT; } function S(t) { return t.variant === O.MONOCHROME; } !function (t) { t[t.MONOCHROME = 0] = "MONOCHROME", t[t.NEUTRAL = 1] = "NEUTRAL", t[t.TONAL_SPOT = 2] = "TONAL_SPOT", t[t.VIBRANT = 3] = "VIBRANT", t[t.EXPRESSIVE = 4] = "EXPRESSIVE", t[t.FIDELITY = 5] = "FIDELITY", t[t.CONTENT = 6] = "CONTENT", t[t.RAINBOW = 7] = "RAINBOW", t[t.FRUIT_SALAD = 8] = "FRUIT_SALAD"; }(O || (O = {})); class H { static highestSurface(t) { return t.isDark ? H.surfaceBright : H.surfaceDim; } } H.contentAccentToneDelta = 15, H.primaryPaletteKeyColor = x.fromPalette({ name: "primary_palette_key_color", palette: t => t.primaryPalette, tone: t => t.primaryPalette.keyColor.tone }), H.secondaryPaletteKeyColor = x.fromPalette({ name: "secondary_palette_key_color", palette: t => t.secondaryPalette, tone: t => t.secondaryPalette.keyColor.tone }), H.tertiaryPaletteKeyColor = x.fromPalette({ name: "tertiary_palette_key_color", palette: t => t.tertiaryPalette, tone: t => t.tertiaryPalette.keyColor.tone }), H.neutralPaletteKeyColor = x.fromPalette({ name: "neutral_palette_key_color", palette: t => t.neutralPalette, tone: t => t.neutralPalette.keyColor.tone }), H.neutralVariantPaletteKeyColor = x.fromPalette({ name: "neutral_variant_palette_key_color", palette: t => t.neutralVariantPalette, tone: t => t.neutralVariantPalette.keyColor.tone }), H.background = x.fromPalette({ name: "background", palette: t => t.neutralPalette, tone: t => t.isDark ? 6 : 98, isBackground: !0 }), H.onBackground = x.fromPalette({ name: "on_background", palette: t => t.neutralPalette, tone: t => t.isDark ? 90 : 10, background: t => H.background, contrastCurve: new I(3, 3, 4.5, 7) }), H.surface = x.fromPalette({ name: "surface", palette: t => t.neutralPalette, tone: t => t.isDark ? 6 : 98, isBackground: !0 }), H.surfaceDim = x.fromPalette({ name: "surface_dim", palette: t => t.neutralPalette, tone: t => t.isDark ? 6 : new I(87, 87, 80, 75).get(t.contrastLevel), isBackground: !0 }), H.surfaceBright = x.fromPalette({ name: "surface_bright", palette: t => t.neutralPalette, tone: t => t.isDark ? new I(24, 24, 29, 34).get(t.contrastLevel) : 98, isBackground: !0 }), H.surfaceContainerLowest = x.fromPalette({ name: "surface_container_lowest", palette: t => t.neutralPalette, tone: t => t.isDark ? new I(4, 4, 2, 0).get(t.contrastLevel) : 100, isBackground: !0 }), H.surfaceContainerLow = x.fromPalette({ name: "surface_container_low", palette: t => t.neutralPalette, tone: t => t.isDark ? new I(10, 10, 11, 12).get(t.contrastLevel) : new I(96, 96, 96, 95).get(t.contrastLevel), isBackground: !0 }), H.surfaceContainer = x.fromPalette({ name: "surface_container", palette: t => t.neutralPalette, tone: t => t.isDark ? new I(12, 12, 16, 20).get(t.contrastLevel) : new I(94, 94, 92, 90).get(t.contrastLevel), isBackground: !0 }), H.surfaceContainerHigh = x.fromPalette({ name: "surface_container_high", palette: t => t.neutralPalette, tone: t => t.isDark ? new I(17, 17, 21, 25).get(t.contrastLevel) : new I(92, 92, 88, 85).get(t.contrastLevel), isBackground: !0 }), H.surfaceContainerHighest = x.fromPalette({ name: "surface_container_highest", palette: t => t.neutralPalette, tone: t => t.isDark ? new I(22, 22, 26, 30).get(t.contrastLevel) : new I(90, 90, 84, 80).get(t.contrastLevel), isBackground: !0 }), H.onSurface = x.fromPalette({ name: "on_surface", palette: t => t.neutralPalette, tone: t => t.isDark ? 90 : 10, background: t => H.highestSurface(t), contrastCurve: new I(4.5, 7, 11, 21) }), H.surfaceVariant = x.fromPalette({ name: "surface_variant", palette: t => t.neutralVariantPalette, tone: t => t.isDark ? 30 : 90, isBackground: !0 }), H.onSurfaceVariant = x.fromPalette({ name: "on_surface_variant", palette: t => t.neutralVariantPalette, tone: t => t.isDark ? 80 : 30, background: t => H.highestSurface(t), contrastCurve: new I(3, 4.5, 7, 11) }), H.inverseSurface = x.fromPalette({ name: "inverse_surface", palette: t => t.neutralPalette, tone: t => t.isDark ? 90 : 20 }), H.inverseOnSurface = x.fromPalette({ name: "inverse_on_surface", palette: t => t.neutralPalette, tone: t => t.isDark ? 20 : 95, background: t => H.inverseSurface, contrastCurve: new I(4.5, 7, 11, 21) }), H.outline = x.fromPalette({ name: "outline", palette: t => t.neutralVariantPalette, tone: t => t.isDark ? 60 : 50, background: t => H.highestSurface(t), contrastCurve: new I(1.5, 3, 4.5, 7) }), H.outlineVariant = x.fromPalette({ name: "outline_variant", palette: t => t.neutralVariantPalette, tone: t => t.isDark ? 30 : 80, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5) }), H.shadow = x.fromPalette({ name: "shadow", palette: t => t.neutralPalette, tone: t => 0 }), H.scrim = x.fromPalette({ name: "scrim", palette: t => t.neutralPalette, tone: t => 0 }), H.surfaceTint = x.fromPalette({ name: "surface_tint", palette: t => t.primaryPalette, tone: t => t.isDark ? 80 : 40, isBackground: !0 }), H.primary = x.fromPalette({ name: "primary", palette: t => t.primaryPalette, tone: t => S(t) ? t.isDark ? 100 : 0 : t.isDark ? 80 : 40, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(3, 4.5, 7, 7), toneDeltaPair: t => new F(H.primaryContainer, H.primary, 10, "nearer", !1) }), H.onPrimary = x.fromPalette({ name: "on_primary", palette: t => t.primaryPalette, tone: t => S(t) ? t.isDark ? 10 : 90 : t.isDark ? 20 : 100, background: t => H.primary, contrastCurve: new I(4.5, 7, 11, 21) }), H.primaryContainer = x.fromPalette({ name: "primary_container", palette: t => t.primaryPalette, tone: t => R(t) ? t.sourceColorHct.tone : S(t) ? t.isDark ? 85 : 25 : t.isDark ? 30 : 90, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.primaryContainer, H.primary, 10, "nearer", !1) }), H.onPrimaryContainer = x.fromPalette({ name: "on_primary_container", palette: t => t.primaryPalette, tone: t => R(t) ? x.foregroundTone(H.primaryContainer.tone(t), 4.5) : S(t) ? t.isDark ? 0 : 100 : t.isDark ? 90 : 30, background: t => H.primaryContainer, contrastCurve: new I(3, 4.5, 7, 11) }), H.inversePrimary = x.fromPalette({ name: "inverse_primary", palette: t => t.primaryPalette, tone: t => t.isDark ? 40 : 80, background: t => H.inverseSurface, contrastCurve: new I(3, 4.5, 7, 7) }), H.secondary = x.fromPalette({ name: "secondary", palette: t => t.secondaryPalette, tone: t => t.isDark ? 80 : 40, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(3, 4.5, 7, 7), toneDeltaPair: t => new F(H.secondaryContainer, H.secondary, 10, "nearer", !1) }), H.onSecondary = x.fromPalette({ name: "on_secondary", palette: t => t.secondaryPalette, tone: t => S(t) ? t.isDark ? 10 : 100 : t.isDark ? 20 : 100, background: t => H.secondary, contrastCurve: new I(4.5, 7, 11, 21) }), H.secondaryContainer = x.fromPalette({ name: "secondary_container", palette: t => t.secondaryPalette, tone: t => { const e = t.isDark ? 30 : 90; return S(t) ? t.isDark ? 30 : 85 : R(t) ? function (t, e, r, a) { let n = r, o = T.from(t, e, r); if (o.chroma < e) { let r = o.chroma; for (; o.chroma < e;) { n += a ? -1 : 1; const i = T.from(t, e, n); if (r > i.chroma) break; if (Math.abs(i.chroma - e) < .4) break; Math.abs(i.chroma - e) < Math.abs(o.chroma - e) && (o = i), r = Math.max(r, i.chroma); } } return n; }(t.secondaryPalette.hue, t.secondaryPalette.chroma, e, !t.isDark) : e; }, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.secondaryContainer, H.secondary, 10, "nearer", !1) }), H.onSecondaryContainer = x.fromPalette({ name: "on_secondary_container", palette: t => t.secondaryPalette, tone: t => S(t) ? t.isDark ? 90 : 10 : R(t) ? x.foregroundTone(H.secondaryContainer.tone(t), 4.5) : t.isDark ? 90 : 30, background: t => H.secondaryContainer, contrastCurve: new I(3, 4.5, 7, 11) }), H.tertiary = x.fromPalette({ name: "tertiary", palette: t => t.tertiaryPalette, tone: t => S(t) ? t.isDark ? 90 : 25 : t.isDark ? 80 : 40, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(3, 4.5, 7, 7), toneDeltaPair: t => new F(H.tertiaryContainer, H.tertiary, 10, "nearer", !1) }), H.onTertiary = x.fromPalette({ name: "on_tertiary", palette: t => t.tertiaryPalette, tone: t => S(t) ? t.isDark ? 10 : 90 : t.isDark ? 20 : 100, background: t => H.tertiary, contrastCurve: new I(4.5, 7, 11, 21) }), H.tertiaryContainer = x.fromPalette({ name: "tertiary_container", palette: t => t.tertiaryPalette, tone: t => { if (S(t)) return t.isDark ? 60 : 49; if (!R(t)) return t.isDark ? 30 : 90; const e = t.tertiaryPalette.getHct(t.sourceColorHct.tone); return A.fixIfDisliked(e).tone; }, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.tertiaryContainer, H.tertiary, 10, "nearer", !1) }), H.onTertiaryContainer = x.fromPalette({ name: "on_tertiary_container", palette: t => t.tertiaryPalette, tone: t => S(t) ? t.isDark ? 0 : 100 : R(t) ? x.foregroundTone(H.tertiaryContainer.tone(t), 4.5) : t.isDark ? 90 : 30, background: t => H.tertiaryContainer, contrastCurve: new I(3, 4.5, 7, 11) }), H.error = x.fromPalette({ name: "error", palette: t => t.errorPalette, tone: t => t.isDark ? 80 : 40, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(3, 4.5, 7, 7), toneDeltaPair: t => new F(H.errorContainer, H.error, 10, "nearer", !1) }), H.onError = x.fromPalette({ name: "on_error", palette: t => t.errorPalette, tone: t => t.isDark ? 20 : 100, background: t => H.error, contrastCurve: new I(4.5, 7, 11, 21) }), H.errorContainer = x.fromPalette({ name: "error_container", palette: t => t.errorPalette, tone: t => t.isDark ? 30 : 90, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.errorContainer, H.error, 10, "nearer", !1) }), H.onErrorContainer = x.fromPalette({ name: "on_error_container", palette: t => t.errorPalette, tone: t => S(t) ? t.isDark ? 90 : 10 : t.isDark ? 90 : 30, background: t => H.errorContainer, contrastCurve: new I(3, 4.5, 7, 11) }), H.primaryFixed = x.fromPalette({ name: "primary_fixed", palette: t => t.primaryPalette, tone: t => S(t) ? 40 : 90, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.primaryFixed, H.primaryFixedDim, 10, "lighter", !0) }), H.primaryFixedDim = x.fromPalette({ name: "primary_fixed_dim", palette: t => t.primaryPalette, tone: t => S(t) ? 30 : 80, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.primaryFixed, H.primaryFixedDim, 10, "lighter", !0) }), H.onPrimaryFixed = x.fromPalette({ name: "on_primary_fixed", palette: t => t.primaryPalette, tone: t => S(t) ? 100 : 10, background: t => H.primaryFixedDim, secondBackground: t => H.primaryFixed, contrastCurve: new I(4.5, 7, 11, 21) }), H.onPrimaryFixedVariant = x.fromPalette({ name: "on_primary_fixed_variant", palette: t => t.primaryPalette, tone: t => S(t) ? 90 : 30, background: t => H.primaryFixedDim, secondBackground: t => H.primaryFixed, contrastCurve: new I(3, 4.5, 7, 11) }), H.secondaryFixed = x.fromPalette({ name: "secondary_fixed", palette: t => t.secondaryPalette, tone: t => S(t) ? 80 : 90, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.secondaryFixed, H.secondaryFixedDim, 10, "lighter", !0) }), H.secondaryFixedDim = x.fromPalette({ name: "secondary_fixed_dim", palette: t => t.secondaryPalette, tone: t => S(t) ? 70 : 80, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.secondaryFixed, H.secondaryFixedDim, 10, "lighter", !0) }), H.onSecondaryFixed = x.fromPalette({ name: "on_secondary_fixed", palette: t => t.secondaryPalette, tone: t => 10, background: t => H.secondaryFixedDim, secondBackground: t => H.secondaryFixed, contrastCurve: new I(4.5, 7, 11, 21) }), H.onSecondaryFixedVariant = x.fromPalette({ name: "on_secondary_fixed_variant", palette: t => t.secondaryPalette, tone: t => S(t) ? 25 : 30, background: t => H.secondaryFixedDim, secondBackground: t => H.secondaryFixed, contrastCurve: new I(3, 4.5, 7, 11) }), H.tertiaryFixed = x.fromPalette({ name: "tertiary_fixed", palette: t => t.tertiaryPalette, tone: t => S(t) ? 40 : 90, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.tertiaryFixed, H.tertiaryFixedDim, 10, "lighter", !0) }), H.tertiaryFixedDim = x.fromPalette({ name: "tertiary_fixed_dim", palette: t => t.tertiaryPalette, tone: t => S(t) ? 30 : 80, isBackground: !0, background: t => H.highestSurface(t), contrastCurve: new I(1, 1, 3, 4.5), toneDeltaPair: t => new F(H.tertiaryFixed, H.tertiaryFixedDim, 10, "lighter", !0) }), H.onTertiaryFixed = x.fromPalette({ name: "on_tertiary_fixed", palette: t => t.tertiaryPalette, tone: t => S(t) ? 100 : 10, background: t => H.tertiaryFixedDim, secondBackground: t => H.tertiaryFixed, contrastCurve: new I(4.5, 7, 11, 21) }), H.onTertiaryFixedVariant = x.fromPalette({ name: "on_tertiary_fixed_variant", palette: t => t.tertiaryPalette, tone: t => S(t) ? 90 : 30, background: t => H.tertiaryFixedDim, secondBackground: t => H.tertiaryFixed, contrastCurve: new I(3, 4.5, 7, 11) }); class L { constructor(t) { this.sourceColorArgb = t.sourceColorArgb, this.variant = t.variant, this.contrastLevel = t.contrastLevel, this.isDark = t.isDark, this.sourceColorHct = T.fromInt(t.sourceColorArgb), this.primaryPalette = t.primaryPalette, this.secondaryPalette = t.secondaryPalette, this.tertiaryPalette = t.tertiaryPalette, this.neutralPalette = t.neutralPalette, this.neutralVariantPalette = t.neutralVariantPalette, this.errorPalette = v.fromHueAndChroma(25, 84); } static getRotatedHue(t, e, r) { const a = t.hue; if (e.length !== r.length) throw new Error(`mismatch between hue length ${e.length} & rotations ${r.length}`); if (1 === r.length) return i(t.hue + r[0]); const n = e.length; for (let t = 0; t <= n - 2; t++) { const n = e[t], o = e[t + 1]; if (n < a && a < o) return i(a + r[t]); } return a; } getArgb(t) { return t.getArgb(this); } getHct(t) { return t.getHct(this); } get primaryPaletteKeyColor() { return this.getArgb(H.primaryPaletteKeyColor); } get secondaryPaletteKeyColor() { return this.getArgb(H.secondaryPaletteKeyColor); } get tertiaryPaletteKeyColor() { return this.getArgb(H.tertiaryPaletteKeyColor); } get neutralPaletteKeyColor() { return this.getArgb(H.neutralPaletteKeyColor); } get neutralVariantPaletteKeyColor() { return this.getArgb(H.neutralVariantPaletteKeyColor); } get background() { return this.getArgb(H.background); } get onBackground() { return this.getArgb(H.onBackground); } get surface() { return this.getArgb(H.surface); } get surfaceDim() { return this.getArgb(H.surfaceDim); } get surfaceBright() { return this.getArgb(H.surfaceBright); } get surfaceContainerLowest() { return this.getArgb(H.surfaceContainerLowest); } get surfaceContainerLow() { return this.getArgb(H.surfaceContainerLow); } get surfaceContainer() { return this.getArgb(H.surfaceContainer); } get surfaceContainerHigh() { return this.getArgb(H.surfaceContainerHigh); } get surfaceContainerHighest() { return this.getArgb(H.surfaceContainerHighest); } get onSurface() { return this.getArgb(H.onSurface); } get surfaceVariant() { return this.getArgb(H.surfaceVariant); } get onSurfaceVariant() { return this.getArgb(H.onSurfaceVariant); } get inverseSurface() { return this.getArgb(H.inverseSurface); } get inverseOnSurface() { return this.getArgb(H.inverseOnSurface); } get outline() { return this.getArgb(H.outline); } get outlineVariant() { return this.getArgb(H.outlineVariant); } get shadow() { return this.getArgb(H.shadow); } get scrim() { return this.getArgb(H.scrim); } get surfaceTint() { return this.getArgb(H.surfaceTint); } get primary() { return this.getArgb(H.primary); } get onPrimary() { return this.getArgb(H.onPrimary); } get primaryContainer() { return this.getArgb(H.primaryContainer); } get onPrimaryContainer() { return this.getArgb(H.onPrimaryContainer); } get inversePrimary() { return this.getArgb(H.inversePrimary); } get secondary() { return this.getArgb(H.secondary); } get onSecondary() { return this.getArgb(H.onSecondary); } get secondaryContainer() { return this.getArgb(H.secondaryContainer); } get onSecondaryContainer() { return this.getArgb(H.onSecondaryContainer); } get tertiary() { return this.getArgb(H.tertiary); } get onTertiary() { return this.getArgb(H.onTertiary); } get tertiaryContainer() { return this.getArgb(H.tertiaryContainer); } get onTertiaryContainer() { return this.getArgb(H.onTertiaryContainer); } get error() { return this.getArgb(H.error); } get onError() { return this.getArgb(H.onError); } get errorContainer() { return this.getArgb(H.errorContainer); } get onErrorContainer() { return this.getArgb(H.onErrorContainer); } get primaryFixed() { return this.getArgb(H.primaryFixed); } get primaryFixedDim() { return this.getArgb(H.primaryFixedDim); } get onPrimaryFixed() { return this.getArgb(H.onPrimaryFixed); } get onPrimaryFixedVariant() { return this.getArgb(H.onPrimaryFixedVariant); } get secondaryFixed() { return this.getArgb(H.secondaryFixed); } get secondaryFixedDim() { return this.getArgb(H.secondaryFixedDim); } get onSecondaryFixed() { return this.getArgb(H.onSecondaryFixed); } get onSecondaryFixedVariant() { return this.getArgb(H.onSecondaryFixedVariant); } get tertiaryFixed() { return this.getArgb(H.tertiaryFixed); } get tertiaryFixedDim() { return this.getArgb(H.tertiaryFixedDim); } get onTertiaryFixed() { return this.getArgb(H.onTertiaryFixed); } get onTertiaryFixedVariant() { return this.getArgb(H.onTertiaryFixedVariant); } } class E { constructor(t) { this.input = t, this.hctsByTempCache = [], this.hctsByHueCache = [], this.tempsByHctCache = new Map, this.inputRelativeTemperatureCache = -1, this.complementCache = null; } get hctsByTemp() { if (this.hctsByTempCache.length > 0) return this.hctsByTempCache; const t = this.hctsByHue.concat([this.input]), e = this.tempsByHct; return t.sort(((t, r) => e.get(t) - e.get(r))), this.hctsByTempCache = t, t; } get warmest() { return this.hctsByTemp[this.hctsByTemp.length - 1]; } get coldest() { return this.hctsByTemp[0]; } analogous(t = 5, e = 12) { const r = Math.round(this.input.hue), a = this.hctsByHue[r]; let n = this.relativeTemperature(a); const i = [a]; let s = 0; for (let t = 0; t < 360; t++) { const e = o(r + t), a = this.hctsByHue[e], i = this.relativeTemperature(a), c = Math.abs(i - n); n = i, s += c; } let c = 1; const h = s / e; let u = 0; for (n = this.relativeTemperature(a); i.length < e;) { const t = o(r + c), a = this.hctsByHue[t], s = this.relativeTemperature(a); u += Math.abs(s - n); let l = u >= i.length * h, g = 1; for (; l && i.length < e;)i.push(a), l = u >= (i.length + g) * h, g++; if (n = s, c++, c > 360) { for (; i.length < e;)i.push(a); break; } } const l = [this.input], g = Math.floor((t - 1) / 2); for (let t = 1; t < g + 1; t++) { let e = 0 - t; for (; e < 0;)e = i.length + e; e >= i.length && (e %= i.length), l.splice(0, 0, i[e]); } const m = t - g - 1; for (let t = 1; t < m + 1; t++) { let e = t; for (; e < 0;)e = i.length + e; e >= i.length && (e %= i.length), l.push(i[e]); } return l; } get complement() { if (null != this.complementCache) return this.complementCache; const t = this.coldest.hue, e = this.tempsByHct.get(this.coldest), r = this.warmest.hue, a = this.tempsByHct.get(this.warmest) - e, n = E.isBetween(this.input.hue, t, r), o = n ? r : t, s = n ? t : r; let c = 1e3, h = this.hctsByHue[Math.round(this.input.hue)]; const u = 1 - this.inputRelativeTemperature; for (let t = 0; t <= 360; t += 1) { const r = i(o + 1 * t); if (!E.isBetween(r, o, s)) continue; const n = this.hctsByHue[Math.round(r)], l = (this.tempsByHct.get(n) - e) / a, g = Math.abs(u - l); g < c && (c = g, h = n); } return this.complementCache = h, this.complementCache; } relativeTemperature(t) { const e = this.tempsByHct.get(this.warmest) - this.tempsByHct.get(this.coldest), r = this.tempsByHct.get(t) - this.tempsByHct.get(this.coldest); return 0 === e ? .5 : r / e; } get inputRelativeTemperature() { return this.inputRelativeTemperatureCache >= 0 || (this.inputRelativeTemperatureCache = this.relativeTemperature(this.input)), this.inputRelativeTemperatureCache; } get tempsByHct() { if (this.tempsByHctCache.size > 0) return this.tempsByHctCache; const t = this.hctsByHue.concat([this.input]), e = new Map; for (const r of t) e.set(r, E.rawTemperature(r)); return this.tempsByHctCache = e, e; } get hctsByHue() { if (this.hctsByHueCache.length > 0) return this.hctsByHueCache; const t = []; for (let e = 0; e <= 360; e += 1) { const r = T.from(e, this.input.chroma, this.input.tone); t.push(r); } return this.hctsByHueCache = t, this.hctsByHueCache; } static isBetween(t, e, r) { return e < r ? e <= t && t <= r : e <= t || t <= r; } static rawTemperature(t) { const e = function (t) { const e = C(m(t)), r = C(d(t)), a = C(f(t)), n = c, o = n[0][0] * e + n[0][1] * r + n[0][2] * a, i = n[1][0] * e + n[1][1] * r + n[1][2] * a, s = n[2][0] * e + n[2][1] * r + n[2][2] * a, h = i / u[1], l = s / u[2], g = M(o / u[0]), y = M(h); return [116 * y - 16, 500 * (g - y), 200 * (y - M(l))]; }(t.toInt()), r = i(180 * Math.atan2(e[2], e[1]) / Math.PI), a = Math.sqrt(e[1] * e[1] + e[2] * e[2]); return .02 * Math.pow(a, 1.07) * Math.cos(i(r - 50) * Math.PI / 180) - .5; } } class V extends L { constructor(t, e, r) { super({ sourceColorArgb: t.toInt(), variant: O.EXPRESSIVE, contrastLevel: r, isDark: e, primaryPalette: v.fromHueAndChroma(i(t.hue + 240), 40), secondaryPalette: v.fromHueAndChroma(L.getRotatedHue(t, V.hues, V.secondaryRotations), 24), tertiaryPalette: v.fromHueAndChroma(L.getRotatedHue(t, V.hues, V.tertiaryRotations), 32), neutralPalette: v.fromHueAndChroma(t.hue + 15, 8), neutralVariantPalette: v.fromHueAndChroma(t.hue + 15, 12) }); } } V.hues = [0, 21, 51, 121, 151, 191, 271, 321, 360], V.secondaryRotations = [45, 95, 45, 20, 45, 90, 45, 45, 45], V.tertiaryRotations = [120, 120, 20, 45, 20, 15, 20, 120, 120]; class N extends L { constructor(t, e, r) { super({ sourceColorArgb: t.toInt(), variant: O.FIDELITY, contrastLevel: r, isDark: e, primaryPalette: v.fromHueAndChroma(t.hue, t.chroma), secondaryPalette: v.fromHueAndChroma(t.hue, Math.max(t.chroma - 32, .5 * t.chroma)), tertiaryPalette: v.fromInt(A.fixIfDisliked(new E(t).complement).toInt()), neutralPalette: v.fromHueAndChroma(t.hue, t.chroma / 8), neutralVariantPalette: v.fromHueAndChroma(t.hue, t.chroma / 8 + 4) }); } } class U extends L { constructor(t, e, r) { super({ sourceColorArgb: t.toInt(), variant: O.VIBRANT, contrastLevel: r, isDark: e, primaryPalette: v.fromHueAndChroma(t.hue, 200), secondaryPalette: v.fromHueAndChroma(L.getRotatedHue(t, U.hues, U.secondaryRotations), 24), tertiaryPalette: v.fromHueAndChroma(L.getRotatedHue(t, U.hues, U.tertiaryRotations), 32), neutralPalette: v.fromHueAndChroma(t.hue, 10), neutralVariantPalette: v.fromHueAndChroma(t.hue, 12) }); } } U.hues = [0, 41, 61, 101, 131, 181, 251, 301, 360], U.secondaryRotations = [18, 15, 10, 12, 15, 18, 15, 12, 12], U.tertiaryRotations = [35, 30, 20, 25, 30, 35, 30, 25, 25]; const q = { desired: 4, fallbackColorARGB: 4282549748, filter: !0 }; function G(t, e) { return t.score > e.score ? -1 : t.score < e.score ? 1 : 0; } class z { constructor() { } static score(t, e) { const { desired: r, fallbackColorARGB: a, filter: n } = { ...q, ...e }, i = [], s = new Array(360).fill(0); let c = 0; for (const [e, r] of t.entries()) { const t = T.fromInt(e); i.push(t), s[Math.floor(t.hue)] += r, c += r; } const h = new Array(360).fill(0); for (let t = 0; t < 360; t++) { const e = s[t] / c; for (let r = t - 14; r < t + 16; r++)h[o(r)] += e; } const u = new Array; for (const t of i) { const e = h[o(Math.round(t.hue))]; if (n && (t.chroma < z.CUTOFF_CHROMA || e <= z.CUTOFF_EXCITED_PROPORTION)) continue; const r = 100 * e * z.WEIGHT_PROPORTION, a = t.chroma < z.TARGET_CHROMA ? z.WEIGHT_CHROMA_BELOW : z.WEIGHT_CHROMA_ABOVE, i = r + (t.chroma - z.TARGET_CHROMA) * a; u.push({ hct: t, score: i }); } u.sort(G); const l = []; for (let t = 90; t >= 15; t--) { l.length = 0; for (const { hct: e } of u) if (l.find((r => { return a = e.hue, n = r.hue, 180 - Math.abs(Math.abs(a - n) - 180) < t; var a, n; })) || l.push(e), l.length >= r) break; if (l.length >= r) break; } const g = []; 0 === l.length && g.push(a); for (const t of l) g.push(t.toInt()); return g; } } function j(t) { return `rgb(${m(t)} ${d(t)} ${f(t)})`; } function K(t) { const e = new N(function (t) { const e = l(t.r, t.g, t.b); return T.fromInt(e); }(t), !1, 0), r = document.documentElement; r.style.setProperty("--primary", j(e.primary)), r.style.setProperty("--onPrimary", j(e.onPrimary)), r.style.setProperty("--primaryContainer", j(e.primaryContainer)), r.style.setProperty("--onPrimaryContainer", j(e.onPrimaryContainer)), r.style.setProperty("--secondary", j(e.secondary)), r.style.setProperty("--onSecondary", j(e.onSecondary)), r.style.setProperty("--secondaryContainer", j(e.secondaryContainer)), r.style.setProperty("--onSecondaryContainer", j(e.onSecondaryContainer)), r.style.setProperty("--tertiary", j(e.tertiary)), r.style.setProperty("--onTertiary", j(e.onTertiary)), r.style.setProperty("--tertiaryContainer", j(e.tertiaryContainer)), r.style.setProperty("--onTertiaryContainer", j(e.onTertiaryContainer)), r.style.setProperty("--error", j(e.error)), r.style.setProperty("--onError", j(e.onError)), r.style.setProperty("--errorContainer", j(e.errorContainer)), r.style.setProperty("--onErrorContainer", j(e.onErrorContainer)), r.style.setProperty("--background", j(e.background)), r.style.setProperty("--onBackground", j(e.onBackground)), r.style.setProperty("--surface", j(e.surface)), r.style.setProperty("--onSurface", j(e.onSurface)), r.style.setProperty("--surfaceContainerLow", j(e.surfaceContainerLow)), r.style.setProperty("--surfaceContainerLowest", j(e.surfaceContainerLowest)), r.style.setProperty("--surfaceContainer", j(e.surfaceContainer)), r.style.setProperty("--surfaceContainerHigh", j(e.surfaceContainerHigh)), r.style.setProperty("--surfaceContainerHighest", j(e.surfaceContainerHighest)), r.style.setProperty("--surfaceVariant", j(e.surfaceVariant)), r.style.setProperty("--onSurfaceVariant", j(e.onSurfaceVariant)), r.style.setProperty("--outline", j(e.outline)), r.style.setProperty("--outlineVariant", j(e.outlineVariant)), r.style.setProperty("--shadow", j(e.shadow)), r.style.setProperty("--scrim", j(e.scrim)), r.style.setProperty("--inverseSurface", j(e.inverseSurface)), r.style.setProperty("--inverseOnSurface", j(e.inverseOnSurface)), r.style.setProperty("--inversePrimary", j(e.inversePrimary)); } z.TARGET_CHROMA = 48, z.WEIGHT_PROPORTION = .7, z.WEIGHT_CHROMA_ABOVE = .3, z.WEIGHT_CHROMA_BELOW = .1, z.CUTOFF_CHROMA = 5, z.CUTOFF_EXCITED_PROPORTION = .01; const Y = window.localStorage.getItem("color-picker"); return null != Y && K(JSON.parse(Y)), e; })()));